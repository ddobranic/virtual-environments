name: MMS image generation
on:
  workflow_call:
    inputs:
      image_name:
        type: string
        description: An OS image to build
        required: true
      image_readme_name:
        type: string
        description: README file path
        required: true
      custom_repo:
        type: string
        description: Custom repo to checkout
        required: false
      custom_repo_hash:
        type: string
        description: Custom repo hash
        required: false
defaults:
  run:
    shell: pwsh

jobs:
  build:
    runs-on: windows-agents
    steps:
      - name: Checkout repository
        if: ${{ inputs.custom_repo == '' && inputs.custom_repo_hash == ''  }}
        uses: actions/checkout@v3
        with:
          repository: 'actions/runner-images'
          
      - name: Checkout custom repository
        if: ${{ inputs.custom_repo != '' && inputs.custom_repo_hash != ''  }}
        uses: actions/checkout@v3
        with:
          repository: '${{ inputs.custom_repo }}'
          ref: '${{ inputs.custom_repo_hash }}'
    
      - name: Set image varibles
        run: |
          $ImageType = "${{ inputs.image_name }}"

          if ($ImageType.StartsWith("ubuntu")) { $TemplateDirectoryName = "linux" } else { $TemplateDirectoryName = "win" }
          
          $TemplateDirectoryPath = Join-Path "images" $TemplateDirectoryName | Resolve-Path
          $TemplatePath = Join-Path $TemplateDirectoryPath "$ImageType.pkr.hcl"
          
          if ( -not (Test-Path $TemplatePath) ) {
            $TemplatePath = Join-Path $TemplateDirectoryPath "$ImageType.json"
          } 
          
          echo "::set-env name=TemplatePath::$TemplatePath"
          echo "::set-env name=TemplateDirectoryPath::$TemplateDirectoryPath"
          echo "::set-env name=$ImageType::$ImageType"
        env:
           ACTIONS_ALLOW_UNSECURE_COMMANDS: true
          
      - name: Build image
        run: |
            ./images.CI/linux-and-win/build-image.ps1 `
              -TemplatePath ${{ env.TemplatePath }} `
              -ClientId ${{ secrets.CLIENT_ID }} `
              -ClientSecret ${{ secrets.CLIENT_SECRET }} `
              -Location ${{ secrets.AZURE_LOCATION }} `
              -ResourcesNamePrefix ${{ github.run_number }} `
              -ResourceGroup ${{ secrets.AZURE_RESOURCE_GROUP }} `
              -StorageAccount ${{ secrets.AZURE_STORAGE_ACCOUNT }} `
              -SubscriptionId ${{ secrets.AZURE_SUBSCRIPTION }} `
              -TenantId ${{ secrets.AZURE_TENANT }} `
              -VirtualNetworkName ${{ secrets.BUILD_AGENT_VNET_NAME }} `
              -VirtualNetworkSubnet ${{ secrets.BUILD_AGENT_SUBNET_NAME }} `
              -VirtualNetworkRG ${{ secrets.BUILD_AGENT_VNET_RESOURCE_GROUP }} `
        env:
          PACKER_LOG: 1
          PACKER_LOG_PATH: ${{ runner.temp }}/packer-log.txt
          RUN_VALIDATION_FLAG: true
          
      - name: Output Readme file content
        run: |
          Get-Content -Path (Join-Path "$env:TemplateDirectoryPath" "${{ inputs.image_readme_name }}")
          
      - name: Print provisioners duration
        run: |
          ./images.CI/measure-provisioners-duration.ps1 `
            -PackerLogPath "$${{ runner.temp }}/packer-log.txt" `
            -PrefixToPathTrim "$env:TemplateDirectoryPath" `
            -PrintTopNLongest 25
            
      - name: Create release for VM deployment
        run: |
          ./images.CI/linux-and-win/create-release.ps1 `
            -BuildId ${{ github.run_number }} `
            -Organization ${{ env.RELEASE_TARGET_ORGANIZATION }} `
            -DefinitionId ${{ env.RELEASE_TARGET_DEFINITION_ID }} `
            -Project ${{ env.RELEASE_TARGET_PROJECT }} `
            -ImageName ${{ env.ImageType }} `
            -AccessToken ${{ secrets.RELEASE_TARGET_TOKEN }}
        env:
          RELEASE_TARGET_ORGANIZATION: mseng
          RELEASE_TARGET_DEFINITION_ID: '3851'
          RELEASE_TARGET_PROJECT: AzureDevOps
          
      - name: Clean up resources
        if: ${{ always() }}
        run: |
          ./images.CI/linux-and-win/cleanup.ps1 `
            -ResourcesNamePrefix ${{ github.run_number }} `
            -Image ${{ env.ImageType }} `
            -StorageAccount ${{ secret.AZURE_STORAGE_ACCOUNT }} `
            -SubscriptionId ${{ secret.AZURE_SUBSCRIPTION }} `
            -ClientId ${{ secret.CLIENT_ID }} `
            -ClientSecret ${{ secret.CLIENT_SECRET }} `
            -TenantId ${{ secret.AZURE_TENANT }}
